# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2022-01-28T15:27:13+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, constr
from typing_extensions import Literal


class Data(BaseModel):
    url: Optional[str] = None
    server: Optional[str] = None
    filetype: Optional[str] = None
    type: Optional[str] = None
    tilesetInfo: Optional[Dict[str, Any]] = None
    children: Optional[List] = None
    tiles: Optional[Dict[str, Any]] = None


class Locks(BaseModel):
    __root__: Any


class ViewProperties(BaseModel):
    __root__: Any


class Tracks(BaseModel):
    __root__: Any


class Domain(BaseModel):
    __root__: List[float] = Field(..., max_items=2, min_items=2)


class GenomePositionSearchBox(BaseModel):
    autocompleteServer: Optional[constr(regex=r'^(.*)$')] = Field(
        '', examples=['//higlass.io/api/v1'], title='The Autocomplete Server URL'
    )
    autocompleteId: Optional[constr(regex=r'^(.*)$')] = Field(
        '', examples=['OHJakQICQD6gTD7skx4EWA'], title='The Autocomplete ID'
    )
    chromInfoServer: constr(regex=r'^(.*)$') = Field(
        ..., examples=['//higlass.io/api/v1'], title='The Chrominfo Server URL'
    )
    chromInfoId: constr(regex=r'^(.*)$') = Field(
        ..., examples=['hg19'], title='The Chromosome Info ID'
    )
    visible: Optional[bool] = Field(False, title='The Visible Schema')


class Layout(BaseModel):
    class Config:
        extra = Extra.forbid

    x: int = Field(..., title='The X Position')
    y: int = Field(..., title='The Y Position')
    w: int = Field(..., title='Width')
    h: int = Field(..., title='Height')
    moved: Optional[bool] = None
    static: Optional[bool] = None


class Options(BaseModel):
    extent: Optional[List] = None
    minWidth: Optional[float] = None
    fill: Optional[str] = None
    fillOpacity: Optional[float] = None
    stroke: Optional[str] = None
    strokeOpacity: Optional[float] = None
    strokeWidth: Optional[float] = None
    strokePos: Optional[Union[str, List[Any]]] = None
    outline: Optional[str] = None
    outlineOpacity: Optional[float] = None
    outlineWidth: Optional[float] = None
    outlinePos: Optional[Union[str, List[Any]]] = None


class Overlay(BaseModel):
    class Config:
        extra = Extra.forbid

    chromInfoPath: Optional[str] = None
    includes: Optional[List] = None
    options: Optional[Options] = None
    type: Optional[str] = None
    uid: Optional[str] = None


class LocationLocksByViewUid(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class LocksByViewUid(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class Slug(BaseModel):
    __root__: str


class AxisSpecificLocks(BaseModel):
    class Config:
        extra = Extra.forbid

    axis: Literal['x', 'y']
    lock: str


class EnumTrack(BaseModel):
    class Config:
        extra = Extra.forbid

    server: Optional[str] = None
    tilesetUid: Optional[str] = None
    data: Optional[Data] = None
    uid: Optional[str] = None
    type: Literal[
        'multivec',
        '1d-heatmap',
        'line',
        'point',
        'bar',
        'divergent-bar',
        'stacked-interval',
        'gene-annotations',
        'linear-2d-rectangle-domains',
        'chromosome-labels',
        'linear-heatmap',
        '1d-value-interval',
        '2d-annotations',
        '2d-chromosome-annotations',
        '2d-chromosome-grid',
        '2d-chromosome-labels',
        '2d-rectangle-domains',
        '2d-tiles',
        'arrowhead-domains',
        'bedlike',
        'cross-rule',
        'dummy',
        'horizontal-1d-annotations',
        'horizontal-1d-heatmap',
        'horizontal-1d-tiles',
        'horizontal-1d-value-interval',
        'horizontal-2d-rectangle-domains',
        'horizontal-bar',
        'horizontal-chromosome-grid',
        'horizontal-chromosome-labels',
        'horizontal-divergent-bar',
        'horizontal-gene-annotations',
        'horizontal-heatmap',
        'horizontal-line',
        'horizontal-multivec',
        'horizontal-point',
        'horizontal-rule',
        'horizontal-vector-heatmap',
        'image-tiles',
        'left-axis',
        'left-stacked-interval',
        'mapbox-tiles',
        'osm-2d-tile-ids',
        'osm-tiles',
        'raster-tiles',
        'simple-svg',
        'square-markers',
        'top-axis',
        'top-stacked-interval',
        'vertical-1d-annotations',
        'vertical-1d-heatmap',
        'vertical-1d-tiles',
        'vertical-1d-value-interval',
        'vertical-2d-rectangle-domains',
        'vertical-bar',
        'vertical-bedlike',
        'vertical-chromosome-grid',
        'vertical-chromosome-labels',
        'vertical-gene-annotations',
        'vertical-heatmap',
        'vertical-line',
        'vertical-multivec',
        'vertical-point',
        'vertical-rule',
        'vertical-vector-heatmap',
        'viewport-projection-center',
        'viewport-projection-horizontal',
        'viewport-projection-vertical',
    ]
    chromInfoPath: Optional[str] = None
    fromViewUid: Optional[str] = None
    height: Optional[float] = None
    options: Optional[Dict[str, Any]] = None
    width: Optional[float] = None
    x: Optional[float] = None
    y: Optional[float] = None


class HeatmapTrack(BaseModel):
    class Config:
        extra = Extra.forbid

    uid: Optional[str] = None
    type: Optional[Any] = None
    data: Optional[Data] = None
    height: Optional[float] = None
    options: Optional[Dict[str, Any]] = None
    position: Optional[str] = None
    server: Optional[str] = None
    tilesetUid: Optional[str] = None
    width: Optional[float] = None
    transforms: Optional[List] = None


class IndependentViewportProjectionTrack(BaseModel):
    class Config:
        extra = Extra.forbid

    uid: Optional[str] = None
    type: Optional[
        Literal[
            'viewport-projection-horizontal',
            'viewport-projection-vertical',
            'viewport-projection-center',
        ]
    ] = None
    fromViewUid: Optional[Any] = None
    projectionXDomain: Optional[Domain] = None
    projectionYDomain: Optional[Domain] = None
    options: Optional[Dict[str, Any]] = None
    transforms: Optional[List] = None
    width: Optional[float] = None
    x: Optional[float] = None
    y: Optional[float] = None


class LocksDict(BaseModel):
    class Config:
        extra = Extra.forbid

    uid: Optional[Slug] = None


class LocationLocks(BaseModel):
    class Config:
        extra = Extra.forbid

    locksByViewUid: Optional[LocationLocksByViewUid] = None
    locksDict: Optional[Dict[constr(regex=r'.'), LocksDict]] = None


class LocksDict1(BaseModel):
    class Config:
        extra = Extra.forbid

    uid: Optional[Slug] = None
    ignoreOffScreenValues: Optional[bool] = None


class ValueScaleLocks(BaseModel):
    class Config:
        extra = Extra.forbid

    locksByViewUid: LocksByViewUid
    locksDict: Dict[constr(regex=r'.'), LocksDict1]


class LocksDict2(BaseModel):
    class Config:
        extra = Extra.forbid

    uid: Optional[Slug] = None


class ZoomLocks(BaseModel):
    class Config:
        extra = Extra.forbid

    locksByViewUid: Optional[LocksByViewUid] = None
    locksDict: Optional[Dict[constr(regex=r'.'), LocksDict2]] = None


class HiglassViewconf(BaseModel):
    class Config:
        extra = Extra.forbid

    editable: Optional[bool] = True
    viewEditable: Optional[bool] = True
    tracksEditable: Optional[bool] = True
    zoomFixed: Optional[bool] = None
    compactLayout: Optional[bool] = None
    exportViewUrl: Optional[str] = None
    trackSourceServers: Optional[List[str]] = Field(None, min_length=1)
    zoomLocks: Optional[ZoomLocks] = None
    locationLocks: Optional[LocationLocks] = None
    valueScaleLocks: Optional[ValueScaleLocks] = None
    views: Optional[List[View]] = Field(None, min_length=1)
    chromInfoPath: Optional[str] = None


class View(BaseModel):
    class Config:
        extra = Extra.forbid

    autocompleteSource: Optional[str] = None
    chromInfoPath: Optional[str] = None
    genomePositionSearchBox: Optional[GenomePositionSearchBox] = None
    genomePositionSearchBoxVisible: Optional[bool] = None
    initialXDomain: Optional[Domain] = None
    initialYDomain: Optional[Domain] = None
    layout: Layout
    overlays: Optional[List[Overlay]] = None
    selectionView: Optional[bool] = None
    tracks: TracksObject
    uid: Optional[str] = None
    zoomFixed: Optional[bool] = None
    zoomLimits: Optional[List] = Field([1, None], max_length=2, min_length=2)


class TracksObject(BaseModel):
    class Config:
        extra = Extra.forbid

    left: Optional[TracksArray] = None
    right: Optional[TracksArray] = None
    top: Optional[TracksArray] = None
    bottom: Optional[TracksArray] = None
    center: Optional[TracksArray] = None
    whole: Optional[TracksArray] = None
    gallery: Optional[TracksArray] = None


class TracksArray(BaseModel):
    __root__: List[
        Union[
            EnumTrack, CombinedTrack, HeatmapTrack, IndependentViewportProjectionTrack
        ]
    ]


class CombinedTrack(BaseModel):
    class Config:
        extra = Extra.forbid

    contents: TracksArray
    height: Optional[float] = None
    options: Optional[Any] = None
    position: Optional[str] = None
    type: Optional[Any] = None
    uid: Optional[str] = None
    width: Optional[float] = None


HiglassViewconf.update_forward_refs()
View.update_forward_refs()
TracksObject.update_forward_refs()
TracksArray.update_forward_refs()
